<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机科学导论--学习笔记</title>
    <link href="/2020/06/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机科学导论–学习笔记-包含计算机科学导论书籍"><a href="#计算机科学导论–学习笔记-包含计算机科学导论书籍" class="headerlink" title="计算机科学导论–学习笔记(包含计算机科学导论书籍)"></a>计算机科学导论–学习笔记(包含计算机科学导论书籍)</h1><h2 id="Lesson1-绪论"><a href="#Lesson1-绪论" class="headerlink" title="Lesson1 绪论"></a>Lesson1 绪论</h2><h3 id="NO1-1-图灵模型"><a href="#NO1-1-图灵模型" class="headerlink" title="NO1.1 图灵模型"></a>NO1.1 图灵模型</h3><p>根据图灵模型所得的通用图灵机是对现代计算机的首次描述。</p><ul><li>阿兰·图灵在1937年首次提出了一个通用计算设备的设想，他设想所有的计算都可能在一种特殊的机器上执行，这就是现在所说的图灵机。</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj1.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><ul><li>图灵模型，该模型是在图灵机思想的基础上，演变而来的模型，它更适用于通用计算机，因为图灵模型添加了一个额外的元素到计算机中，这就是程序。</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj2.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><ul><li>简单讲，程序是一个有序的指令集合，作用是告诉计算机怎么对数据进行处理。</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj3.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO1-2-冯·诺依曼模型"><a href="#NO1-2-冯·诺依曼模型" class="headerlink" title="NO1.2 冯·诺依曼模型"></a>NO1.2 冯·诺依曼模型</h3><p>基于图灵机的思想，冯·诺依曼在1944~1945年期间指出了：鉴于程序和数据在逻辑上是相同的，因此程序也能存储在计算机的存储器中——这就是冯诺依曼模型。</p><ul><li>基于冯·诺依曼模型建造的计算机有四个模块：<ul><li>存储器，用来存储数据和程序的模块；</li><li>算数逻辑单元(ALU，即运算器)，用来进行计算和逻辑运算的模块；</li><li>控制单元(即控制器)，顾名思义，就是对存储器、算术逻辑单元、以及输入/输出设备进行控制的模块；</li><li>输入/输出单元(即输入/输出设备)，就是接收计算机外部的数据和程序，并将计算机的处理结果输出到外部的模块。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj4.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><ul><li>存储程序的概念：程序由指令组成，并和数据一起存放在存储器中，计算机启动后，能自动地按照程序指令的逻辑顺序逐条把指令从存储器中读出来，并且完成由程序所描述的处理工作；冯·诺依曼模型指出，程序必须存储在存储器中。</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj5.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO1-3-计算机的组成"><a href="#NO1-3-计算机的组成" class="headerlink" title="NO1.3 计算机的组成"></a>NO1.3 计算机的组成</h3><p>计算机由两大部分组成，即计算机硬件和计算机软件(包括了数据)。软件工程指的是结构化程序的设计和编写。</p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO1-4-计算机的发展历史"><a href="#NO1-4-计算机的发展历史" class="headerlink" title="NO1.4 计算机的发展历史"></a>NO1.4 计算机的发展历史</h3><p>计算机的发展历史，说白了就是计算机硬件的发展历史。</p><ul><li>计算机的发展历程，主要分为了以下几个阶段：<ul><li>机械计算机器(1930年以前)，该阶段，人们发明了一些用来进行计算的机器，但是它们与计算机的现代概念几乎没有什么关系；</li><li>电子计算机的诞生(1930~1950年)，在这个阶段里，电子计算机工业先驱的科学家们发明了一些计算机。如，1939年发明的第一台计算机，名为阿塔纳索夫-贝瑞计算机(又称ABC)、同时期被发明的还有德国的“Z1”、1946年诞生了著名的“ENIAC”、第一台基于冯氏思想(即存储程序思想)而诞生的计算机“EDVAC”等等；</li><li>计算机的诞生(1950年至今)，1950年以后出现的计算机差不多都基于冯·诺依曼模型。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson2-数字系统"><a href="#Lesson2-数字系统" class="headerlink" title="Lesson2 数字系统"></a>Lesson2 数字系统</h2><h3 id="NO2-1-数字系统的理解"><a href="#NO2-1-数字系统的理解" class="headerlink" title="NO2.1 数字系统的理解"></a>NO2.1 数字系统的理解</h3><p>数字系统，简单理解就是，在不同的系统中，数字表示的方法是不一样的。如，数字5，在十进制中就是5，在中文中是“五”，在罗马数字系统中是“V”，这三个符号表示的都是5，只不过符号不一样。数字系统又分为位置化数字系统和非位置化数字系统。</p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO2-2-位置化数字系统"><a href="#NO2-2-位置化数字系统" class="headerlink" title="NO2.2 位置化数字系统"></a>NO2.2 位置化数字系统</h3><p>所谓的位置化数字系统，指的是数字中符号所占据的位置决定了其表示的值。如，一个数字符号3，出现在不同的位置表示的意思也不同，如，个位(3)，十位(30)，百位(300)，千位(3000)等等。在位置化数字系统的眼里，任何的数字，采用任何的进制，都可以用一条公式概括出来，如下图所示：</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj6.png" srcset="/img/loading.gif" alt="Image"></p><p><strong>说明：这条公式中字母S旁边的k-1….2、1、0、-1、-2、-3….-l表示的是数字所在位置。</strong></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj7.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：这是这个数字要表达的值的计算方式，其中b的零次方、一次方….通俗的讲，就是这个数字在这个位置所要表示的大小，而b表示这个数字是多少进制。</strong></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj8.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：十进制数789，用这个公式的表达。</strong></p><p>&nbsp;</p><ul><li>常见的位置化数字系统包括：<ul><li>十进制系统，简单的讲就是用0~9这十个符号来表示数字的系统，而十进制系统的规则是“逢十进一”。生活中我们用的数字就是十进制系统的数字。如，9+1，这里已经满十了，根据规则“逢十进一”，所以就需要往前进一位，且9后面没有别的数字，就只能重新回到0，所以9变成0，又因为往前进了一位，所以结果就是10。其实我们常用的数字，正确的表示应该为：正负号(数值)₁₀，只是我们把符号、括号、以及底都省略了，但并不是真的都消失了；</li><li>二进制系统，就是使用0和1这两个符号来表示数字的系统，规则是“逢二进一”；</li><li>十六进制系统，是指用0到9和(10)A、(11)B、(12)C、(13)D、(14)E、(15)F，这十六个符号来表示数字的系统，规则是“逢十六进一”；</li><li>八进制系统，用数字0到7这八个符号来表示数字的系统，规则是“逢八进一”。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj9.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：这是正数224的表示。</strong></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj10.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：这是小数24.13的表示。</strong></p><pre><code class="hljs java">拓展：基数和位权(其实就是上面所说的位置化数字系统)一、基数，其实指的就是，在不同进制数中，进制是多少，那么它的基数就是多少；如二进制的基数就是<span class="hljs-number">2</span>，八进制的基数就是<span class="hljs-number">8</span>，同理十进制的基数是<span class="hljs-number">10</span>，十六进制的基数就是<span class="hljs-number">16</span>等等；    二、权值，简单理解就是幂，而幂的值是根据当前目标值的所在位数减<span class="hljs-number">1</span>，即n-<span class="hljs-number">1</span>；如，二进制<span class="hljs-number">101</span>，基数是<span class="hljs-number">2</span>，权值分别是<span class="hljs-number">12</span>^<span class="hljs-number">2</span>、<span class="hljs-number">02</span>^<span class="hljs-number">1</span>、<span class="hljs-number">12</span>^<span class="hljs-number">0</span>，百位上的<span class="hljs-number">1</span>，从右往左数，是第三位，所以它的权值就是<span class="hljs-number">3</span>-<span class="hljs-number">1</span>=<span class="hljs-number">2</span>，十位上的<span class="hljs-number">0</span>的权值就是<span class="hljs-number">2</span>-<span class="hljs-number">1</span>=<span class="hljs-number">1</span>，以此类推；三、位权，其实就是指以进制基数为底的幂，简单理解就是，二进制的位权就是以<span class="hljs-number">2</span>为底的幂，同理十六进制的位权则是以<span class="hljs-number">16</span>为底的幂，其他进制也是同理。</code></pre><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj11.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：这是与十进制数25等值的二进制数11001。</strong></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj12.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：这是与十进制数5.75等值的二进制数101.11。</strong></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj13.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：这是与十进制数686等值的十六进制数2AE。</strong></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj14.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：这是与十进制数686等值的八进制数1256。</strong></p><p>&nbsp;</p><ul><li><p>十进制与其他进制的相互转换。</p><ul><li><p>其他进制到十进制的转换，在上面的介绍中，其实已经讲了，即：每一位上的数值x进制^权值^。如，八进制的1256，转换为十进制：1x8^3^+2x8^2^+5x8^1^+6x8^0^ = 686；<strong>注意：小数点左边的权值从0开始递增，如，1、2、3、4…依次递增，而小数点右边的位置量则是从-1开始递减，如，-1、-2、-3、-4….依次递减。</strong></p></li><li><p>十进制到其他进制的转换，分为两部分：</p><ul><li>整数部分的规则：十进制数/对应的进制，直到商为0，然后余数取反即可；</li><li>小数部分的规则：十进制小数对应的进制，然后取整数部分，直到小数部分为0或达到足够的位数时结束即可。</li></ul></li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj15.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：十进制35转二进制。</strong></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj16.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：十进制小数0.625转二进制，即0.101。</strong></p><p>&nbsp;</p><ul><li>二进制转八进制或十六进制，采用的方法很相似，二进制转八进制用的三位归纳法，二进制转十六进制用的四位归纳。</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj17.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：图示是八进制转十六进制的方法。</strong></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO2-3-非位置化数字系统"><a href="#NO2-3-非位置化数字系统" class="headerlink" title="NO2.3 非位置化数字系统"></a>NO2.3 非位置化数字系统</h3><p>非位置化数字系统，指的是，使用有限的数字符号，且每个符号有一个值，这个值不会因为符号所处的位置改变而改变，简单讲就是，这个符号是什么值，在哪个位置都是这个值。如，罗马数字就是一个例子。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj18.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson3-数据存储"><a href="#Lesson3-数据存储" class="headerlink" title="Lesson3 数据存储"></a>Lesson3 数据存储</h2><h3 id="NO3-1-计算机内部的数据"><a href="#NO3-1-计算机内部的数据" class="headerlink" title="NO3.1 计算机内部的数据"></a>NO3.1 计算机内部的数据</h3><p>所有计算机外部的数据，要转换为二进制数据后才存入计算机，当数据从计算机输出时，再还原回来。</p><ul><li>位(bit)是存储在计算机中的最小单位，它是0或1，换句话说，存入计算机的数据，都会转换为0或1来表示。</li></ul><p>&nbsp;</p><ul><li>二进制表示的数字串有8位的话，被称为1字节(Byte)，所以1 Byte = 8 bit，意思就是1个字节有8位。</li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO3-2-存储数字"><a href="#NO3-2-存储数字" class="headerlink" title="NO3.2 存储数字"></a>NO3.2 存储数字</h3><p>计算机使用定点和浮点来表示整数和小数。</p><ul><li>内存中存储整数使用的是定点表示法；整数中既有正整数、负整数、0，所以可以用以下几种方式来表示：<ul><li>无符号表示法，用于无符号整数(就是没有符号的整数)，范围是0到无穷大之间；但是计算机肯定是无法表示无穷大这个整数的，所以就定义了一个最大无符号整数，值为<img src="../_resources/33afb12e021fc746cc3d15592afa429c.png" srcset="/img/loading.gif" alt="">，这里的n代表计算机中分配用于表示无符号整数的二进制位数；</li><li>符号加绝对值表示法，即计算机分配的二进制的位数中，最高位(就是最左边的位置)必须是符号位，且0表示正，1表示负；范围是-(2^n-1^-1)至+(2^n-1^-1)；</li><li>二进制补码表示法，即用二进制的补码来存储有符号整数；简单理解就是，通过一个数的二进制，分别得到原码(就是二进制)、反码、补码，最后用补码的形式来进行存储这个数；<strong>注意：正数的原反补都是一样的；而负数的反码要在原码的基础上，逐位取反，符号位不变；负数的补码要在反码的基础上，末位加1。</strong></li></ul></li></ul><p>例如：</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj19.png" srcset="/img/loading.gif" alt=""></p><p><strong>说明：存储7到八位的存储单元中：先将7转换为二进制数，得到的二进制数为111，但是不足八位，所以在左边添0，变成00000111，这样就满八位了。</strong></p><p>&nbsp;<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj20.png" srcset="/img/loading.gif" alt="Image"></p><p><strong>说明：存储258到十六位的存储单元中：将258转为二进制数后得到100000010，还差七位才够十六位，所以往左边添0，直到满16位即可。</strong></p><p>&nbsp;<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj21.png" srcset="/img/loading.gif" alt="Image"></p><p><strong>说明：存储11到四位的存储单元中，又试图再加上9：首先存储11到四位的存储单元中，11转换为二进制为1011，原本这没有什么问题，但是如果11+9=20，那么就会造成值溢出的情况，因为20转为二进制为10100，五位，无法全部存储到四位的存储单元中去，所以计算机丢掉第五位，也就是最前面的1，最后存储的则是0100，值就是4了。</strong></p><p>&nbsp;<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj22.png" srcset="/img/loading.gif" alt="Image"></p><p><strong>说明：将-28存储到8位的存储单元中：先将28转为二进制，值为00011100，用符号加绝对值表示法，最左边的位置不应该用0，而是要用1，因为存储的是-28，而不是28，所以最后的存储的二进制的值为10011100。</strong></p><p>&nbsp;</p><ul><li>存储小数使用的则是浮点表示法；浮点表示法表示的数都由三部分组成：符号(即正负号)、指数(进制数的幂)、尾数(小数点右边的数)；且十进制中的浮点表示法，我们很熟悉，就是科学计数法，而二进制中就叫做浮点表示法；<strong>注意：浮点表示法中，小数点左边必须是非零，这称为规范化。</strong><ul><li>科学计数法(用于十进制)；</li><li>浮点表示法(用于二进制)。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj23.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj24.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj25.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj26.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><ul><li>IEEE(电子和电子工程师协会)定义了多种存储浮点数的标准，常用的是单精度、双精度。<ul><li>单精度(32位)，即采用32位二进制来表示一个浮点数；</li><li>双精度(64位)，即采用64位二进制来存储一个浮点数。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj27.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj28.png" srcset="/img/loading.gif" alt="Image"></p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj29.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p>例如：<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj30.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：十进制5.75的单精度表示法。</strong></p><p>&nbsp;<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj31.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：十进制数-0.0234375的单精度表示法。</strong></p><p>&nbsp;<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj32.png" srcset="/img/loading.gif" alt="Image"><br>说明：将单精度表示的11001010000000000111000100001111转换为十进制。</p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO3-3-存储文本"><a href="#NO3-3-存储文本" class="headerlink" title="NO3.3 存储文本"></a>NO3.3 存储文本</h3><p>字符是各种文字和符号的总称，而字符集则是多个字符的集合；我们使用字符集来存储文本数据。</p><ul><li>常见的主流字符集有：<ul><li>ASCII字符集，用7位的二进制来表示128种不同的符号；</li><li>Unicode字符集，用32位的二进制来表示4294967296种不同的符号，收集了来自全球不同的语言符号。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO3-4-存储音频"><a href="#NO3-4-存储音频" class="headerlink" title="NO3.4 存储音频"></a>NO3.4 存储音频</h3><p>音频表示声音或者音乐。</p><ul><li>我们说存储音频，实际存储的是这个音频信号的密度。通过以下几个步骤可以获取音频信号的密度：<ul><li>采样：即从无穷个点里，选取一部分点，但每个点仍然有无穷的信息。每秒钟40000个样本的采样率对音频信号来说是足够好的；</li><li>量化：将样本的值，截取为最接近的整数值的一种过程。如，实际值为17.2，可截取为17、实际值为17.7，则截取为18；</li><li>编码，将量化后的样本值，转为二进制。也就是将获取到的样本，每个样本都转化为n位的二进制来表示；当今主流的音频编码是MP3(MPEG Layer 3的简写，取44100个样本，且每个样本用16位来表示)，这是一种有损的音乐格式。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj33.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p>&nbsp;</p><p>NO3.5 存储图像<br>图像又该使用什么方式存储呢。</p><ul><li>存储在计算机中的图像使用两种不同的技术：光栅图和矢量图；将图像转化为二进制进行存储，就是视频了；<ul><li>光栅图，用于存储模拟图像，即一个图像由模拟数据组成，数据密度随空间的变化而变化，这时候的采样称为扫描，样本称为像素；整个图像被分为小的像素，每个像素假定都有单独的密度值；</li><li>矢量图，使用几何图形来组合图像，而这些几何图形又用数学公式来表达，所以说矢量图是由定义如何绘制这些形状的一系列命令构成的。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson4-数据运算"><a href="#Lesson4-数据运算" class="headerlink" title="Lesson4 数据运算"></a>Lesson4 数据运算</h2><h3 id="NO4-1-逻辑运算"><a href="#NO4-1-逻辑运算" class="headerlink" title="NO4.1 逻辑运算"></a>NO4.1 逻辑运算</h3><p>这里的逻辑运算是指二进制的逻辑运算。</p><ul><li>二进制的逻辑运算有如下几种：<ul><li>与(AND)：两个二进制补码做与运算，位对齐，只要两位上的任意一位是0，那么与的结果就为0；</li><li>或(OR)：两个二进制补码做或运算，位对齐，只要两位上的任意一位是1，那么或的结果就为1；</li><li>异或(XOR)：两个二进制补码做异或运算，位对齐，只要两位上的数字都相同，则结果为0，不相同则为1；</li><li>非(NOT)：一个二进制补码做非运算，按位取反，如果位上是0，则非运算结果为1，如果位上是1，结果则为0。</li></ul></li></ul><p>例如：</p><pre><code class="hljs java"><span class="hljs-comment">//与运算</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>-----------------------<span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-comment">//或运算</span><span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>-----------------------<span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>        <span class="hljs-comment">//异或运算    </span><span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span><span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>-----------------------<span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>        <span class="hljs-comment">//非运算    </span><span class="hljs-number">1</span>    <span class="hljs-number">0</span>------------------------<span class="hljs-number">0</span>    <span class="hljs-number">1</span></code></pre><p>&nbsp;</p><p>&nbsp;    </p><h3 id="NO4-2-移位运算"><a href="#NO4-2-移位运算" class="headerlink" title="NO4.2 移位运算"></a>NO4.2 移位运算</h3><p>所谓的移位运算，简单理解就是将二进制进行左移或者右移。移位运算分为两种，逻辑移位运算和算数移位运算：</p><ul><li>逻辑移位运算中，又分为逻辑移位、循环移位；<ul><li>逻辑移位，简单的理解就是将二进制向左移(不够的部分就添加)或者向右移(多出的部分会被丢弃)；</li><li>循环移位，原理和逻辑移位差不多，只不过移位过程中，不会添加或丢弃二进制位，而是循环使用。</li></ul></li></ul><p>例如：<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj34.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：逻辑左移，左边多的部分丢弃，右边少的部分添0。</strong>    </p><pre><code class="hljs java"><span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    原始的二进制补码------------------------------------<span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    逻辑左移之后的二进制补码</code></pre><p>&nbsp;<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj35.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：逻辑右移，左边少的部分添0，右边多的部分丢弃。</strong></p><pre><code class="hljs java"><span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    原始的二进制补码------------------------------------<span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    逻辑右移之后的二进制补码</code></pre><p>&nbsp;<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj36.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：循环左移，左边多的部分会循环到右边少的部分，意思就是左边多出来的，刚好给右边少的。</strong></p><pre><code class="hljs java"><span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    原始的二进制补码------------------------------------<span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    循环左移之后的二进制补码</code></pre><p>&nbsp;<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj37.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：循环右移，右边多的部分会循环到左边少的部分，意思就是右边多出来的，刚好给左边少的。</strong></p><pre><code class="hljs java"><span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    原始的二进制补码------------------------------------<span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    循环右移之后的二进制补码</code></pre><p>&nbsp;</p><ul><li>算数移位运算，其实跟逻辑移位差不多，只不过算数移位的时候要注意一下符号问题；<strong>注意：算数左移相当于二进制补码的十进制数乘以2，右移就是除以2。</strong></li></ul><p>例如：<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj38.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：算数左移的话，符号位会被丢弃，这个时候看看新的符号位是不是跟以前是一样的，一样就正常左移，运算成功；不一样的话就出现上溢或下溢，结果就是非法的。</strong></p><pre><code class="hljs java">运算成功：<span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    原始的二进制补码------------------------------------<span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    算数左移之后的二进制补码，符号位还是<span class="hljs-number">1</span>，那么运算成功----------------------------------------------------------------------------运算结果不合法：<span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    原始的二进制补码------------------------------------<span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    算数左移之后的二进制补码，符号位由<span class="hljs-number">1</span>变成了<span class="hljs-number">0</span>，结果出现上溢或下溢，那么这个结果就是非法的</code></pre><p>&nbsp;<br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj39.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：算数右移的话，原先最左边的符号位是什么，右移之后，左边少的，就添加对应的符号位就可以了(正数就添0，负数就添1)。</strong></p><pre><code class="hljs java"><span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    原始的二进制补码------------------------------------<span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    算数右移之后的二进制补码，移位之前符号位是<span class="hljs-number">1</span>，是一个负数，则右移之后，添加<span class="hljs-number">1</span>即可</code></pre><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO4-3-算数运算"><a href="#NO4-3-算数运算" class="headerlink" title="NO4.3 算数运算"></a>NO4.3 算数运算</h3><p>算数运算包括加减乘除。</p><ul><li>二进制补码的加减法，很简单，加法就是二进制补码，对位相加即可；而减法则是将减数(无论正负数)诸位取反后再加一，然后相加即可。</li></ul><p>例如：</p><pre><code class="hljs java">加法：<span class="hljs-number">00010001</span> + <span class="hljs-number">00010110</span>              进<span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>+   <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>---------------------------------------------------------------    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    用十进制检查结果+<span class="hljs-number">17</span>+(+<span class="hljs-number">22</span>)=+<span class="hljs-number">39</span><span class="hljs-number">00011000</span> + <span class="hljs-number">11101111</span>进<span class="hljs-number">1</span>  进<span class="hljs-number">1</span>  进<span class="hljs-number">1</span>   进<span class="hljs-number">1</span>  进<span class="hljs-number">1</span>  进<span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>+    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>----------------------------------------------------------------     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    用十进制检查结果(+<span class="hljs-number">24</span>)+(-<span class="hljs-number">17</span>)=(+<span class="hljs-number">7</span>)注意：上面的结果是<span class="hljs-number">100000111</span>，但是只能存<span class="hljs-number">8</span>位，最左边进的<span class="hljs-number">1</span>，就被丢弃了。============================================================================减法：<span class="hljs-number">00011000</span> - <span class="hljs-number">11101111</span>               进<span class="hljs-number">1</span>     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>+    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    将减数在原先的基础上诸位取反，然后加<span class="hljs-number">1</span>----------------------------------------------------------------     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    用十进制检查结果(<span class="hljs-number">24</span>)-(-<span class="hljs-number">17</span>)=(+<span class="hljs-number">41</span>)<span class="hljs-number">11011101</span> - <span class="hljs-number">00010100</span>进<span class="hljs-number">1</span> 进<span class="hljs-number">1</span>  进<span class="hljs-number">1</span>  进<span class="hljs-number">1</span>   进<span class="hljs-number">1</span>  进<span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>+   <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    将减数在原先的基础上诸位取反，然后加<span class="hljs-number">1</span>------------------------------------------------------------------    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    用十进制检查结果(-<span class="hljs-number">35</span>)-(+<span class="hljs-number">20</span>)=(-<span class="hljs-number">55</span>)注意：上面的结果为<span class="hljs-number">111001001</span>，只能存<span class="hljs-number">8</span>位，即最前面的<span class="hljs-number">1</span>被丢弃了。</code></pre><p>&nbsp;</p><ul><li>8位补码能够表示数的范围是-128~127，即10000000-11111111表示-128到-1,  00000000-01111111表示0-127。</li></ul><p>&nbsp;</p><ul><li>使用符号加绝对值的格式进行运算的时候，符号位做异或操作，其他位上加法就对位相加，减法则是将将减数(无论正负数)诸位(除了符号位)取反后再加一，如果出现上溢或下溢，则对符号位操作就行。</li></ul><p>例如：</p><pre><code class="hljs java">加法：<span class="hljs-number">00010001</span> + <span class="hljs-number">00010110</span>   符号位     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>+    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>-------------------------------------------------------     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span><span class="hljs-number">00010001</span> + <span class="hljs-number">10010110</span>   符号位     <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>+    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>-------------------------------------------------------     <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>============================================================减法：<span class="hljs-number">11010001</span> - <span class="hljs-number">10010110</span>   符号位 进<span class="hljs-number">1</span>     <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>+    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>-------------------------------------------------------     <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">1</span>注意：上面的结果符号位原本应该是<span class="hljs-number">0</span>，但是后面第<span class="hljs-number">7</span>位上有上溢，所以添加到符号位上。</code></pre><p>&nbsp;</p><ul><li>带小数的加减法。</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj40.png" srcset="/img/loading.gif" alt="Image"></p><p>&amp;nbsp</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj41.png" srcset="/img/loading.gif" alt="Image"><br><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj42.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson5-计算机组成"><a href="#Lesson5-计算机组成" class="headerlink" title="Lesson5 计算机组成"></a>Lesson5 计算机组成</h2><h3 id="NO5-1-中央处理单元-CPU"><a href="#NO5-1-中央处理单元-CPU" class="headerlink" title="NO5.1 中央处理单元(CPU)"></a>NO5.1 中央处理单元(CPU)</h3><p>计算机的组成部件可以分为三大类：中央处理单元(CPU)、主存储器和输入/输出系统。中央处理单元(CPU)用于数据的运算。</p><ul><li>在大多数体系结构中，CPU有三个组成部分：<ul><li>算术逻辑单元(ALU)：用于对数据进行逻辑(如，与、或、异或运算等等)、移位(如，逻辑移位和算数移位)和算数运算(如，整数和带小数的运算)；</li><li>控制单元：用于控制各个部件的操作；</li><li>寄存器组(快速存储单元)：用于临时存放数据的存储单元，每个存储单元是高速且独立的。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO5-2-主存储器"><a href="#NO5-2-主存储器" class="headerlink" title="NO5.2 主存储器"></a>NO5.2 主存储器</h3><p>主存储器里面主要存放的是数据和指令。</p><ul><li>主存储器是存储单元的集合，每个存储单元都有唯一的标识，称为地址。放在存储单元里的数据，是以“位”为单位的(这是最小的单位)，而每8位称为1个字节。</li></ul><p>&nbsp;</p><ul><li>我们把所有存储器中的存储单元的地址的集合称为地址空间，简单讲，就是逻辑上，把所有的存储单元的地址，集合起来我们统称为地址空间。内存地址用无符号的二进制整数来定义。</li></ul><p>&nbsp;</p><ul><li>通常，如果一个计算机有N个字的存储空间的话，那就需要有log<del>2</del>N位的无符号整数来确定每一个存储单元；如，一台计算机有32MB内存，需要多少位来寻址内存中的任意一个字节？32MB的内存地址空间，也就是2^25^(2^5^x2^20^)，这就一位置需要log<del>2</del>2^25^，也就是25位来标识每一个字节。</li></ul><p>&nbsp;</p><ul><li>存储器的类型，主要有两种：<ul><li>RAM，即随机存取存储器，是计算机中主存的主要组成部分，用户可以读和写。根据技术，RAM又可以分为静态SRAM和动态DRAM，前者是用传统的触发器门电路(有0和1两个状态的门)来保存数据，通电时数据一直存在，不需要刷新，特点是速度快，但价格昂贵；后者则是使用电容器来保存数据，会随时间漏掉一部分点，所以需要周期性地刷新，特点是速度慢，但价格便宜；</li><li>ROM，即只读存储器，内容由制造商写进去，用户只能读不能写，断电后数据也会存在。</li></ul></li></ul><p>&nbsp;</p><ul><li>存储器的层次结构。</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj43.png" srcset="/img/loading.gif" alt="Image"></p><p><strong>说明：当对速度要求很苛刻时，可以使用少量高速存储器，寄存器就属于这一类；用适量的中速存储器来存储经常需要访问的数据，高速缓冲存储器属于这一类；存储那些不经常访问的数据，主存就属于这一类。</strong></p><p>&nbsp;</p><ul><li>高速缓冲存储器；</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj44.png" srcset="/img/loading.gif" alt="Image"></p><p><strong>说明：CPU优先去高速缓冲存储器找自己需要的数据，如果有，就直接拿来使用；没有的话就去主存找，拿到数据之后，复制一份放入高速缓冲存储器中，以备下次使用；因为高速缓冲存储器速度比主存要快。</strong></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO5-3-输入-输出系统"><a href="#NO5-3-输入-输出系统" class="headerlink" title="NO5.3 输入/输出系统"></a>NO5.3 输入/输出系统</h3><p>输入/输出系统的作用的是与外界进行通信，在断电情况下可以存储程序和数据。</p><ul><li>输入/输出系统可以分为两大类：<ul><li>非存储设备，这一类设备可以与外界通信，但不能存储信息；常用的有键盘、监视器、打印机等等；</li><li>存储设备，该类可以存储大量的信息以备后用，即断电后也不会丢失数据；常见的有磁盘、磁带、光盘等等。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO5-4-子系统的互连"><a href="#NO5-4-子系统的互连" class="headerlink" title="NO5.4 子系统的互连"></a>NO5.4 子系统的互连</h3><p>CPU和内存之间通常由称为总线(简单讲，其实就是线)的三组线路连接在一起。</p><ul><li>总线分为三种：<ul><li>数据总线：传输数据使用的总线。一根线一次性能传送1个位的数据。如，32根线就能传送一个32位的数据；</li><li>地址总线：用于访问内存地址或I/O设备的总线，存储空间的大小与总线的多少是有关系的。如，存储器容量为<img src="../_resources/4877edb6c2e6b619f637f843d0fad7cc.png" srcset="/img/loading.gif" alt="">，那么地址总线就有n条；</li><li>控制总线：负责控制CPU和内存之间的操作。如，CPU要读取某个内存的信息，就是控制总线发出信号给内存进行读取操作。</li></ul></li></ul><p>&nbsp;</p><ul><li>I/O设备不能够直接与总线相连，而是通过输入/输出控制器或接口卡的器件连接到总线上的。意思就是说，外围设备插入电脑，实际连接的是输入/输出控制器或接口卡，然后由输入/输出控制器或接口卡与总线相连。常用的控制器有SCSI、火线、和USB。输入/输出的寻址有两种方式：一是I/O独立寻址，二是I/O存储器映射寻址。</li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO5-5-程序的执行"><a href="#NO5-5-程序的执行" class="headerlink" title="NO5.5 程序的执行"></a>NO5.5 程序的执行</h3><p>程序，是一组有序指令的集合。</p><ul><li>指令，是指一串能够被计算机识别并执行的二进制代码。指令是计算机进行程序控制的最小单位。计算机所识别的指令集合称为计算机的指令系统。程序的执行，一般包括三个阶段：<ul><li>取指令：控制单元将需要执行的指令复制到CPU的指令寄存器中，且同时该指令的地址也会被放入到程序计数器中，当指令复制完成后，程序计数器自动加1指向内存中下一条指令；</li><li>译码：放在指令寄存器中的指令，会被控制单元负责译码，然后产生一系列的二进制代码；</li><li>执行：控制单元将译码完成后产生的二进制代码拿去执行。</li></ul></li></ul><p>&nbsp;</p><ul><li>I/O设备的运行速度是慢于CPU的，所以当I/O设备向CPU传输数据的时候，CPU要做一个同步(也就是CPU要知道I/O设备把想要传输的数据传输完成了的意思)。有三种方式用于同步：<ul><li>程序控制输入/输出：这是最简单的一种同步。简单理解就是CPU等待I/O设备的输入或输出，等完成了输入或输出，CPU再继续自己的工作。该方式比较浪费CPU的时间，即每次都要查询I/O设备的状态是否准备好输入或输出；</li><li>中断控制输入/输出：当I/O设备准备好了，告诉一声CPU就行，然后CPU进行输入或输出，在通知CPU之前，CPU一直在做自己的事情；</li><li>直接存储器存取(DMA)，该方式用于高速I/O设备间传输数据。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO5-6-介绍两个指令集-了解"><a href="#NO5-6-介绍两个指令集-了解" class="headerlink" title="NO5.6 介绍两个指令集(了解)"></a>NO5.6 介绍两个指令集(了解)</h3><p>计算机体系结构和组织，经历了CISC和RISC。</p><ul><li>计算机体系结构分为两大类：<ul><li>CISC，即复杂指令集。如，英特尔开发的奔腾系列处理器属于这个体系；</li><li>RISC，即精简指令集。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson6-计算机网络"><a href="#Lesson6-计算机网络" class="headerlink" title="Lesson6 计算机网络"></a>Lesson6 计算机网络</h2><h3 id="NO6-1-计算机网络的基本概念"><a href="#NO6-1-计算机网络的基本概念" class="headerlink" title="NO6.1 计算机网络的基本概念"></a>NO6.1 计算机网络的基本概念</h3><p>网络是硬件和软件的组合，它把数据从一个地方发送到另一个地方。硬件是指把信号从网络中的一点传送到另一点的物理设备，而软件由指令组成，这些指令可以使我们从网络上获得想要的服务。</p><ul><li>网络必须符合许多标准，其中最重要的是性能、可靠性和安全；<ul><li>性能：度量方式包括传输时间(即从一个设备传输到另一个设备)和响应时间(查询和响应间的时间间隔)。网络的性能还依赖于其他因素，如，用户数、传输介质类型、硬件的连接能力、软件的效率等等；</li><li>可靠性：即发送数据的准确性、发生故障的频率、从故障中恢复的时间等等；</li><li>安全：主要包括保护数据、防止非授权访问、损坏和修改等等。</li></ul></li></ul><p>&nbsp;</p><ul><li>网络由两个或两个以上通过链路连接的设备构成。链路是数据从一个设备传输到另一个设备的通信通道，通俗的讲，链路就是两个点之间的连线。连接类型有两种：<ul><li>点对点，指两个设备间的专用链路；</li><li>多点(也称多站连接)，指两个以上的指定设备共享一个链路。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj45.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><ul><li>物理拓扑，是指网络在物理上的布置方式。两个或多个设备连接到一个链路，一个或多个链路形成拓扑，而网络的拓扑是所有链路和设备间关系的几何表示。物理拓扑主要有四种基本结构：<ul><li>网状型，每个设备都有专用的点对点链路与其他设备相连；</li><li>星型，每个设备都有专用的点对点链路与称为集线器的中央控制器相连，这种类型的拓扑是唯一常用的；</li><li>总线型，每个设备使用分支线和连接器与总线相连；</li><li>环形，每个设备都有专用的点对点链路，只与两边的设备相连，信号沿着环从一个设备传输到另一个设备，环中的每个设备连接一个中继器。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj46.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><ul><li>如今网络可以分为三类：<ul><li>局域网(LAN)：常常是作为私有的网络，即可能是个人电脑和打印机的连接等等，范围是几公里内，一般用于连接单个办公室、大楼或校园里的设备；</li><li>城域网(MAN)：通常范围是一个镇或一个城市；</li><li>广域网(WAN)：提供长距离的数据、图像、音频和视频信息的传输，范围可能包含一个国家、大洲或全球。</li></ul></li></ul><p>&nbsp;</p><ul><li>当两个或多个网络连接在一起时，就变成了互联网，即internet。</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj47.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：路由器是发送数据包(消息)，并使消息在互联网中传输的连接设备。</strong></p><p>&nbsp;</p><ul><li>因特网(Internet)是最大的，也是最著名的互联网，它由成千上万个互相连接的网络组成，个人和各种组织都使用因特网。</li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO6-2-TCP-IP协议族"><a href="#NO6-2-TCP-IP协议族" class="headerlink" title="NO6.2 TCP/IP协议族"></a>NO6.2 TCP/IP协议族</h3><p>我们用微信聊天的时候，有想过发送的消息是怎么到达对方的微信上的吗？我们可以把发送消息当做一个任务，那么我们把发送消息这个任务过程稍微的拆分一下，肯定要确定每一步做什么，要不然就乱乱的，对吧？为此我们定义一个协议，但又因为我们使用了因特网来完成这个任务，就把这个协议称为TCP/IP协议族。</p><ul><li>如今的TCP/IP协议族通常被定义成五层：<ul><li>应用层；</li><li>传输层；</li><li>网络层；</li><li>数据链路层；</li><li>物理层。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj48.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：如上图，就是我们在聊天的时候，消息的传输，每一层都调用它直接下层的服务。</strong></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO6-3-层"><a href="#NO6-3-层" class="headerlink" title="NO6.3 层"></a>NO6.3 层</h3><p>我们要明确TCP/IP协议族划分的每一层的功能。</p><ul><li>应用层：<ul><li>应用层的功能：<ul><li>这一层允许用户(人或者软件)访问网络，该层负责向用户提供服务。应用层是唯一一个大多数因特网用户能够看到的层。</li></ul></li><li>现在常用的两大网络结构分别是：C/S(即客户端/服务器端)和B/S(即浏览器端/服务器端)；</li><li>客户端想要获取服务器端的某个资源，就必须使用URL，即统一资源定位符。如，访问百度搜索，URL为<a href="http://www.baidu.com/" target="_blank" rel="noopener">www.baidu.com</a>；这个URL并不是服务器的实际地址，只是用于应用层的用户获取服务而使用的应用层地址；</li><li>网络中每一台计算机都有一个称为逻辑地址或IP地址的实际地址。当我们去访问URL的时候，都会经过一个叫做域名服务器的根服务器(国内有许多镜像域名服务器)，即DNS，这里面就存放有我们要访问的URL所对应的IP地址了；</li><li>应用层协议：三种常见的应用层协议为HTTP、FTP、SMTP。</li></ul></li></ul><p>&nbsp;</p><ul><li>传输层：<ul><li>传输层的功能：<ul><li>按端口号寻址：该层负责客户端和服务器端进程间消息的传输，简单讲就是你用什么程序发给我的，我就用什么程序来接收，主要靠的是传输层地址来识别程序。传输层也有一个地址，即端口号，这个端口号是用来干嘛的呢，就是我用某个程序给你发的消息，你也只能用同样的某个程序来接收，而这个程序在电脑上运行的时候，有一个唯一的进程地址表示，这个唯一的进程地址表示就是端口号。如，我用微信程序给小明发消息，这个微信程序运行在我的电脑上的端口号是1000，那么发送的消息就会从这个端口号出去，通过IP地址找到小明的电脑，然后再找到小明电脑上端口号为1000的微信程序(一般程序的端口号安装以后都不会自行改变，是固定的)来接收消息；</li><li>多路复用和解多路复用：简单讲，多路复用就是传输层会收集所有进程中要发出的数据；解多路复用就是把接收到的数据分发给进程，这个过程是使用端口号来完成的；</li><li>拥塞控制：即数据要发送前，传输层检测到网络可能会发生拥塞的话，那么就会把消息存储在缓冲区，发生拥塞就暂缓消息的发送，直到网络不拥塞时再发送消息；</li><li>流量控制：直白的讲，就是让发送方的发送速率不要太快，要让接收方来得及接收；</li><li>差错控制：发送方在发送数据前，传输层可以在缓冲区中保留一个数据的副本，直到发送方从接收方那里接收到包无损坏到达和次序正确的确认，否则发送方就重新发送数据包。</li></ul></li><li>传输层协议：在TCP/IP协议族中定义了三种传输层协议：UDP、TCP和SCTP。</li></ul></li></ul><p>&nbsp;</p><ul><li>网络层：<ul><li>网络层的功能：<ul><li>该层负责单个数据包从源主机到目的主机的发送。</li><li>网络层同样有个地址，网络层通过它的路由表找到下一跳的逻辑地址，然后把这个地址传递给数据链路层；</li><li>路由选择：即确定数据包的部分或全部路径。简单讲，就是数据包的传输不可能一下子就传送到你想要传送的电脑上，中间要经过许多的路由器，当到达一个路由器时，这个路由器会为目的地选择最佳的传输路径。</li></ul></li><li>网络层协议：该层主协议是IP协议，当前版本为IPv4，但IPv6也在使用，虽然不是很普及。IPv4负责从源计算机到目的地计算机的数据包发送，为此，全球的计算机和路由器都用32位的IP地址表示，该IP地址用点分十进制记法表示，该记法把地址分解成4个8位的部分，每个部分写成0~255的十进制数，用三个点来隔开这些部分。如，IPv4地址00001010 00011001 10101100 00001111用点分十进制记法写成10.20.172.15。但IPv4似乎不够用了，最终方案是IPv6，该地址由128位构成。</li></ul></li></ul><p>&nbsp;</p><ul><li>数据链路层：<ul><li>数据链路层的功能：<ul><li>从一个节点到另一个节点，传送数据帧是数据链路层的职责；</li><li>数据链路层地址：一个设备可以静态或动态地找到另一个设备的数据链路层地址。该层的地址不是通用的；</li><li>差错控制和流量控制，方法与传输层相同。</li></ul></li><li>数据链路层协议：以太网协议(当前使用的主流局域网)使用48位地址，该地址通常被写成十六进制格式。如，07:01:02:11:2C:5B。数据链路层地址经常被称为物理地址或介质访问控制地址(MAC)地址。</li></ul></li></ul><p>&nbsp;</p><ul><li>物理层：<ul><li>物理层的功能：使用物理介质传输二进制流。数据链路层的传送单元是帧，而物理层的传送单元是二进制位；帧中的每个位被转化为电磁信号，通过物理介质(无线或电缆)传播；</li><li>物理层不需要地址，传播方式是广播。</li></ul></li></ul><p>&nbsp;</p><ul><li>层的总结。</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj49.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson7-操作系统"><a href="#Lesson7-操作系统" class="headerlink" title="Lesson7 操作系统"></a>Lesson7 操作系统</h2><h3 id="NO7-1-操作系统的功能"><a href="#NO7-1-操作系统的功能" class="headerlink" title="NO7.1 操作系统的功能"></a>NO7.1 操作系统的功能</h3><p>操作系统是计算机硬件和用户的一个接口。使得其它程序更加方便有效地运行，并能方便地对计算机硬件和软件资源进行访问。</p><ul><li>操作系统的功能：<ul><li>有效的使用硬件；</li><li>方便的使用资源。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO7-2-演化"><a href="#NO7-2-演化" class="headerlink" title="NO7.2 演化"></a>NO7.2 演化</h3><p>操作系统的演化过程：批处理系统—-分时系统—-个人系统—-并行系统—-分布式系统—-实时系统。</p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO7-3-组成部分"><a href="#NO7-3-组成部分" class="headerlink" title="NO7.3 组成部分"></a>NO7.3 组成部分</h3><p>现在的操作系统十分复杂，因为它必须可以管理系统中的不同资源。</p><ul><li>每个操作系统都有用户界面，简单讲就是用来接收用户输入，并向操作系统解释这些请求的程序。</li></ul><p>&nbsp;</p><ul><li>现代操作系统至少具有以下四种功能：<ul><li>内存管理；</li><li>进程管理；</li><li>设备管理；</li><li>文件管理。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj50.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO7-4-主流的操作系统"><a href="#NO7-4-主流的操作系统" class="headerlink" title="NO7.4 主流的操作系统"></a>NO7.4 主流的操作系统</h3><p>了解常用的三种系统。</p><ul><li>日常生活常用的三种操作系统：<ul><li>UNIX：是多用户、多道程序、可移植的操作系统，被设计用来方便变成、文本处理、通信。主要由四个部分构成：内核、命令解释器、一组标准工具和应用程序；</li><li>Linux：主要由内核、系统库、系统工具组成；</li><li>Windows NT/2000/XP：微软发布，设计目标是可扩展性、可移植性、可靠性、兼容性和性能；</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson8-算法"><a href="#Lesson8-算法" class="headerlink" title="Lesson8 算法"></a>Lesson8 算法</h2><p>这一章在这里不做学习，会单独作为一门课程学习</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson9-程序设计语言"><a href="#Lesson9-程序设计语言" class="headerlink" title="Lesson9 程序设计语言"></a>Lesson9 程序设计语言</h2><h3 id="NO9-1-计算机语言的演化"><a href="#NO9-1-计算机语言的演化" class="headerlink" title="NO9.1 计算机语言的演化"></a>NO9.1 计算机语言的演化</h3><p>计算机语言经过多年的发展，已经从机器语言发展到了高级语言。</p><ul><li>计算机语言的演化过程：<ul><li>机器语言；<ul><li>在计算机发展的早期，唯一的程序设计语言是机器语言；</li><li>机器语言由“0”和“1”构成；</li><li>机器语言是计算机硬件唯一能理解的语言。</li></ul></li><li>汇编语言；<ul><li>由于机器语言的编写难度大等问题而产生的汇编语言；</li><li>汇编语言使用的是助记符，即是机器语言的一种便于记忆的书写格式；如，mov ax,8；</li><li>使用编译器，把汇编语言编写的程序转译成机器语言。</li></ul></li><li>高级语言。<ul><li>为了提高程序员效率以及从关注计算机转移到关注要解决的问题，导致了高级语言的发展；</li><li>高级语言最后仍然要被编译成机器语言，然后运行；</li><li>常见的高级语言有，C、C++、Java等等。</li></ul></li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO9-2-翻译"><a href="#NO9-2-翻译" class="headerlink" title="NO9.2 翻译"></a>NO9.2 翻译</h3><p>使用高级语言编写的程序，称为源程序。被翻译成的机器语言称为目标程序。</p><ul><li>程序翻译成机器语言的方式有两种：<ul><li>编译：编译的时候，编译器会把源文件处理一遍，生成一个目标文件，然后再执行这个目标文件。该方式类似于做好了一桌子菜再吃饭；</li><li>解释：边处理源文件，边执行。这个方式类似于吃火锅，边烫边吃。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO9-3-编程模式"><a href="#NO9-3-编程模式" class="headerlink" title="NO9.3 编程模式"></a>NO9.3 编程模式</h3><p>编程模式：是指计算机语言看待要解决的问题的方式。</p><ul><li>计算机语言可以分成4种模式：<ul><li>过程式：面向业务逻辑，从上到下的写代码。常见的过程式语言有，C、Pascal等等；</li><li>面向对象：对函数进行分类和封装，让开发“更快更好更强”。常见的面向对象语言有，C++、Java等等；</li><li>函数式：将某个功能代码封装到函数值，以后就不需要重复编写，只要调用函数即可。常见的函数式语言有，LISP等等；</li><li>说明式：使用逻辑推理的逻辑型程序设计语言。如，Prolog。</li></ul></li></ul><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson10-软件工程"><a href="#Lesson10-软件工程" class="headerlink" title="Lesson10 软件工程"></a>Lesson10 软件工程</h2><h3 id="NO10-1-软件生命周期"><a href="#NO10-1-软件生命周期" class="headerlink" title="NO10.1 软件生命周期"></a>NO10.1 软件生命周期</h3><p>开发一个软件需要经过许多的步骤。</p><ul><li>软件的生命周期：</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj51.png" srcset="/img/loading.gif" alt="Image"><br><strong>说明：使用和修改这两个步骤一直进行下去，直到软件过时。</strong></p><p>&nbsp;</p><ul><li>软件的开发过程包括四个阶段：分析、设计、实现和测试。</li></ul><p>&nbsp;</p><ul><li>最常见的两种开发模型：<ul><li>瀑布模型，这个模型的特点是，前一个阶段不结束，后一个阶段不能开始，且一旦出现问题，必须要检查整个过程；</li><li>增量模型，该模型首先完成一个简略版本，但不包括细节，随着时间的增加，逐渐增加细节功能。</li></ul></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj52.png" srcset="/img/loading.gif" alt="Image"></p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Image-jsj53.png" srcset="/img/loading.gif" alt="Image"></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson11-数据结构"><a href="#Lesson11-数据结构" class="headerlink" title="Lesson11 数据结构"></a>Lesson11 数据结构</h2><p>这一章在这里不做学习，会单独作为一门课程学习</p><hr><h2 id="Lesson12-抽象数据类型"><a href="#Lesson12-抽象数据类型" class="headerlink" title="Lesson12 抽象数据类型"></a>Lesson12 抽象数据类型</h2><p>这一章在这里不做学习，是数据结构的更抽象化，学习的性价比暂时不高</p><hr><h2 id="Lesson13-文件结构"><a href="#Lesson13-文件结构" class="headerlink" title="Lesson13 文件结构"></a>Lesson13 文件结构</h2><p>这一章在这里不做学习，是数据库章节的前序，学习的性价比暂时不高</p><hr><h2 id="Lesson14-数据库"><a href="#Lesson14-数据库" class="headerlink" title="Lesson14 数据库"></a>Lesson14 数据库</h2><p>这一章在这里不做学习，会单独作为一门课程学习</p><hr><h2 id="Lesson15-数据压缩"><a href="#Lesson15-数据压缩" class="headerlink" title="Lesson15 数据压缩"></a>Lesson15 数据压缩</h2><p>这一章在这里不做学习，学习的性价比暂时不高</p><hr><h2 id="Lesson16-安全"><a href="#Lesson16-安全" class="headerlink" title="Lesson16 安全"></a>Lesson16 安全</h2><p>这一章在这里不做学习，学习的性价比暂时不高    </p><hr><h2 id="Lesson17-计算理论"><a href="#Lesson17-计算理论" class="headerlink" title="Lesson17 计算理论"></a>Lesson17 计算理论</h2><p>这一章在这里不做学习，学习的性价比暂时不高 </p><hr><h2 id="Lesson18-人工智能"><a href="#Lesson18-人工智能" class="headerlink" title="Lesson18 人工智能"></a>Lesson18 人工智能</h2><p>这一章在这里不做学习，学习的性价比暂时不高 </p><hr>]]></content>
    
    
    <categories>
      
      <category>大一课程</category>
      
      <category>计算机科学导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大一课程</tag>
      
      <tag>计算机</tag>
      
      <tag>科学导论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git和Github--学习笔记</title>
    <link href="/2020/06/25/Git%E5%92%8CGithub--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/25/Git%E5%92%8CGithub--%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Git和Github–学习笔记-包含Git视频"><a href="#Git和Github–学习笔记-包含Git视频" class="headerlink" title="Git和Github–学习笔记(包含Git视频)"></a><strong>Git和Github–学习笔记(包含Git视频)</strong></h1><h2 id="Lesson1-Git概述"><a href="#Lesson1-Git概述" class="headerlink" title="Lesson1 Git概述"></a>Lesson1 Git概述</h2><h3 id="NO1-1-Git简介"><a href="#NO1-1-Git简介" class="headerlink" title="NO1.1 Git简介"></a>NO1.1 Git简介</h3><p>什么是Git呢？Git其实就是一个工具，用于控制代码版本的工具。</p><ul><li>Git：<ul><li>定义：是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或大或小的项目；</li><li>Git和Svn的区别：<ul><li>Git是分布式的，SVN不是。这是Git和其它非分布式的版本控制系统(如，SVN，CVS等)最核心的区别；</li><li>Git把内容按元数据方式存储，而SVN是按文件。所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn、.cvs等的文件夹里；</li><li>Git分支和SVN的分支不同。分支在SVN中一点都不特别，其实它就是版本库中的另外一个目录；</li><li>Git没有一个全局的版本号，而SVN有。目前为止这是跟SVN相比，Git缺少的最大的一个特征；</li><li>Git的内容完整性要优于SVN。Git的内容存储使用的是SHA-1哈希算法，这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ul></li></ul></li></ul><p><img src="./Image-git1.png" srcset="/img/loading.gif" alt="Image"></p><p> &nbsp;</p><ul><li>Git结构可以抽象成几个区域：<ul><li>工作区：即workspace，也就是你在电脑里能看到的目录，其实就是自己写的文件；</li><li>暂存区(也叫索引)：即stage，也就是我们写好的代码文件你肯定要暂时保存起来吧(因为极大可能要修改或提交到版本库等等，常做变动)，就存放在这里，一般存放在”.git”目录下的index文件中，也就是”.git/index”中，所以我们把暂存区也叫做索引(index)；</li><li>版本库：存放已经提交的数据，执行git push命令的时候，就是把这个区的数据push到远程git仓库。</li></ul></li></ul><p><img src="./Image-git2.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>Git的工作流程：<ul><li>写代码(修改工作区)；</li><li>把写好的或修改的文件加入到暂存区，使用命令：git add 文件名；</li><li>把暂存区的修改提交到版本库中，使用命令：git commit；</li><li>此时本地版本库就跟远程仓库(就是我们常用的GitHub、码云、GitLab等等)状态不同了，把版本库推送到远程仓库保持同步：git push。</li></ul></li></ul><p>&nbsp;</p><ul><li>Git安装：<ul><li>Git安装比较简单，按照一般的安装步骤操作即可，这里不做过多的叙述。安装完成后，对着桌面，单机鼠标右键，出现如下图所示，表示安装完成。</li></ul></li></ul><p><img src="./Image-git3.png" srcset="/img/loading.gif" alt=""></p><p><strong>说明：Git Bash：是Unix与Linux风格的命令行，也是使用的最多，推荐的最多的；Git GUI：图形界面的Git，不建议初学者使用，因为无法熟悉常用Git命令</strong>。</p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO1-2-GitHub简介"><a href="#NO1-2-GitHub简介" class="headerlink" title="NO1.2 GitHub简介"></a>NO1.2 GitHub简介</h3><p>GitHub、码云…等等，都是用来保存和管理代码。</p><ul><li>GithHub：<ul><li>定义：也叫代码托管中心，即用来维护Git的远程仓库的，说白了就是维护我们提交到远程仓库的代码。可分为：<ul><li>局域网环境，该环境下有：GitLab服务器；</li><li>互联网环境，该环境下有：GitHub、码云。</li></ul></li></ul></li></ul><p><img src="./Image-git4.png" srcset="/img/loading.gif" alt=""><br><strong>说明：执行流程解释：项目经理将项目，经过在工作区编写和修改、临时存入暂存区等待提交、提交到版本库(也叫版本库)中、最后再由版本库交给代码托管中心进行管理，体现了团队合作的流程。</strong></p><p>&nbsp;</p><p><img src="./Image-git5.png" srcset="/img/loading.gif" alt=""><br><strong>说明：执行流程解释：和上面的执行流程基本一致，不同的是，多了一个第三方可以对目标项目进行修改等操作，当然在发送给第三方前会将项目复制一份给第三方，然后等到第三方提交的时候，会进行审核，毕竟不是什么代码都能加进某个项目中的；审核通过，才会将第三方修改的代码加入进项目中。如，Linux就是部分开源。</strong></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><hr><h2 id="Lesson2-Git基础"><a href="#Lesson2-Git基础" class="headerlink" title="Lesson2 Git基础"></a>Lesson2 Git基础</h2><h3 id="NO2-1-Git常用命令"><a href="#NO2-1-Git常用命令" class="headerlink" title="NO2.1 Git常用命令"></a>NO2.1 Git常用命令</h3><p>我们使用Git，将我们编写好的代码上传到GitHub进行统一管理。</p><ul><li>创建版本库：<ul><li>git init：在当前目录下创建版本仓库。因为Git的很多命令都需要在Git的仓库中运行，所以该命令是使用Git的第一个命令；</li></ul></li></ul><p>&nbsp;</p><ul><li>设置签名：<ul><li>作用：签名的作用是标识不同开发人员的身份，主要是名称和邮箱。不过这签名和代码托管中心没有任何关系，如果没有设置签名，那么有可能在使用命令时，系统由于分辨不出身份而导致出错。签名有两种级别：<ul><li>项目级别：即仅仅在当前版本库范围内有效；<ul><li>git config user.name xxx和git config user.email xxx：分别设置开发者的名称和邮箱。</li></ul></li><li>系统级别：即登录当前操作系统的用户，这个范围内有效(常用的是这个级别)。<ul><li>git config –global user.name xxx和git config –global user.emailxxx：分别设置开发者的名称和邮箱。<strong>注意：两个级别的签名信息都有时，根据就近原则，会以项目级别的为准。</strong></li></ul></li></ul></li><li>cat ~/.gitconfig：查看自己设置的Git用户名称和邮箱。</li></ul></li></ul><p><img src="./Image-git6.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>查看状态：<ul><li>git status [选项]：用于显示工作目录和暂存区的状态，但不会显示已经提交到项目历史中去的消息。选项如下：<ul><li>-s：以简短模式查看本地仓库的状态，会显示两列，第一列是文件的状态，第二列是对应的文件；其中文件状态有：A表示新增，M表示修改，D表示删除，??表示未添加到Git中。</li></ul></li></ul></li></ul><p><img src="./Image-git7.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>添加：<ul><li>git add 文件名  [选项]：用于将工作区中指定的文件存添加暂存区；如果文件名前面不加路径，默认是在当前路径下找该文件。选项如下：<ul><li>-u/–update：添加所有修改、已删除的文件到暂存区中；</li><li>-A/–all：添加所有修改、已删除、新增的文件到暂存区中；</li><li>-i/–interactive：查看所有修改、已删除但没有提交的文件，进入一个子命令系统。</li></ul></li></ul></li></ul><p><img src="./Image-git8.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>提交：<ul><li>git commit [选项]：用于将暂存区中的文件，提交到版本库，除了文件以外，修改文件内容的用户和日志信息也会一起存储在这个提交中。选项如下：<ul><li>-m：格式为-m “本次提交的描述信息”，即将暂存区文件提交到版本库，并添加这一次提交的描述信息；如果不添加该参数，那么在提交时，会给你一个vim文本编辑器来编辑你要添加时的message；</li><li>-a：将所有已跟踪文件中(即曾经有提交到版本库的记录)的执行修改或删除操作的文件都提交到本地仓库，即使它们没有经过git add添加到暂存区；但是新添加的文件，且没有提交过版本库的文件还是要先add再commit才行，即这些文件不适用-a参数；</li><li>–amend：修改上次提交的描述信息。</li></ul></li></ul></li></ul><p><img src="./Image-git9.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>删除：<ul><li>git rm  [选项] 文件名：用于同时从工作区和索引(也就是暂存区)中删除文件。选项如下：<ul><li>–cached：用于将暂存区的文件恢复到工作区，也就是从暂存区中删除这个文件，但是本地文件还存在，只是不想该文件再被版本控制；</li></ul></li></ul></li></ul><p>&nbsp;</p><ul><li>查看日志：<ul><li>git log  [选项]：用于显示提交的所有日志信息，也就是你提交过的历史版本信息；但是无法查看已删除的commit记录。选项如下：<ul><li>-n：显示最新提交的n条记录；</li><li>commitID：显示从第一次提交到指定commitID为止的所有提交的记录；</li><li>–oneline：用一行来显示提交的日志信息；</li></ul></li><li>git reflog：查看所有分支的所有操作记录(包括commit和reset的操作)，包括已经被删除的commit记录。</li></ul></li></ul><p><img src="./Image-git10.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git11.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git12.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git13.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>版本回退：<ul><li>git reset  [选项]：将暂存区的文件撤回工作区，默认撤回的是HEAD指向的文件。选项如下：<ul><li>–soft  commitID：将HEAD指向的文件的版本库版本移动到指定的版本。只移动版本库的HEAD指针，即版本库的版本落后了，但是暂存区和工作区的文件版本没有变更，也就是说，此时暂存区和工作区的版本要比版本库新一些；</li><li>–mixed commitID：将HEAD指向的文件的版本库、暂存区(两个区)的版本都移动到指定的版本。只移动版本库和暂存区的HEAD，即此时版本库和暂存区的版本都落后了，而工作区的版本却是最新的；</li><li>–hard commitID：将HEAD指向的文件的版本库、暂存区、工作区(三个区)的版本移动到指定的版本，但跳到该版本以后，其版本之后添加的文件内容将不会存在。</li></ul></li></ul></li></ul><p><img src="./Image-git14.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>比较文件：<ul><li>git diff [选项] 文件名：用于比较两个区域中的文件差异，默认比较的是工作区和暂存区；另外如果不带文件名进行比较，默认是将当前目录下所有文件与暂存区的版本进行比较(前提是要工作区里有修改过的文件)。选项如下：<ul><li>HEAD：比较的是暂存区和版本库里的文件。</li></ul></li></ul></li></ul><p><img src="./Image-git15.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO2-2-Git分支和分支常用命令"><a href="#NO2-2-Git分支和分支常用命令" class="headerlink" title="NO2.2 Git分支和分支常用命令"></a>NO2.2 Git分支和分支常用命令</h3><p>分支，顾名思义，就是从主干上分化出来的一部分，但不会影响主干(即master)。</p><ul><li>分支：<ul><li>定义：Git分支，其实就是将主干代码的副本，然后不同的开发人员在各自创建的分支上进行开发工作，最后再合并，既没有影响到原来主干的代码进度，开发人员也完成了他们的任务；</li><li>优点：<ul><li>可以同时并行多个开发任务；</li><li>就是分支开发失败，也不会影响主干。</li></ul></li></ul></li></ul><p>&nbsp;</p><ul><li>查看、创建、修改、删除分支：<ul><li>git branch  [选项]：不添加参数选项，则列出本地所有的分支，当前所在分支以“*”标出。选项如下：<ul><li>-v：列出本地所有的分支，当前所在分支以 “*” 标出，并显示最后一次提交；</li><li>分支名：创建一个新的分支，新的分支基于上一次提交建立；</li><li>-m 原分支名称 新分支名称：修改分支名称。如果不指定原分支名称则默认为当前所在分支；</li><li>-M 原分支名称 新分支名称：强制修改分支名称。如果不指定原分支名称则默认为当前所在分支；</li><li>-d 分支名称：删除指定的本地分支；</li><li>-D 分支名称：强制删除指定的本地分支。</li></ul></li></ul></li></ul><p><img src="./Image-git16.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git17.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git18.png" srcset="/img/loading.gif" alt=""> </p><p>&nbsp;</p><p><img src="./Image-git19.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>切换分支和替换工作区文件：<ul><li>git checkout  [选项]：该命令主要有两个功能；选项如下：<ul><li>分支名：切换到已存在的指定分支中去；</li><li>-b 分支名：创建并切换到指定的分支，保留所有的提交记录。等同于git branch和git checkout两个命令合并；</li><li>–orphan：创建并切换到指定的分支，删除所有的提交记录；</li><li>文件名：将暂存区的指定文件，替换掉当前工作区的指定文件，即同一个文件下，当前工作区里文件的内容，被暂存区里的文件内容替换掉了，也就是重写了工作区的文件内容。</li></ul></li></ul></li></ul><p><img src="./Image-git20.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>合并分支：<ul><li>git merge 分支名：首先要切换到被合并的分支下(一般都是主干)，把指定的分支合并到当前所在的分支下；另外如果从远程仓库拉取了文件的最新版本后，需要将该版本和本地工作区的文件进行合并，则使用：git merge 远程仓库别名/分支名。<strong>注意：当合并分支时出现合并冲突，我们需要转为手动合并：即在协商之后决定保留冲突中的哪一部分内容，最后需要git add和git commit -m “提交信息”这两个命令来结束合并状态即可。</strong></li></ul></li></ul><p><img src="./Image-git21.png" srcset="/img/loading.gif" alt=""> </p><p>&nbsp;</p><p><img src="./Image-git22.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git23.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO2-3-Git版本库与GitHub-代码托管中心"><a href="#NO2-3-Git版本库与GitHub-代码托管中心" class="headerlink" title="NO2.3 Git版本库与GitHub(代码托管中心)"></a>NO2.3 Git版本库与GitHub(代码托管中心)</h3><p>Git只是用来与远程仓库互动的一个工具，我们还需要与代码托管中心进行关联。</p><ul><li>关联Git版本库与GitHub远程仓库，并push文件的步骤：<ul><li>注册GitHub，并登陆到GitHub上，创建一个public或者private权限的自定义名称的仓库，这个仓库就是我们用来存储从Git版本库上传的代码文件所使用的仓库；</li><li>在Git上，创建一个新的文件夹作为版本库，使用git init命令即可；然后编写一个代码文件，按顺序使用git add和git commit命令分别上传到暂存库、版本库中；</li><li>关联版本库和远程仓库，也就是告诉版本库，把我想要存储的代码文件发送到哪里去。使用如下命令进行操作：<ul><li>git remote [选项]：列出已经存在的远程仓库；选项如下：<ul><li>-v/–verbose：列出远程仓库的详细信息，在别名后面列出URL地址；</li><li>add 远程仓库的别名 远程仓库的URL地址：添加远程仓库，即将当前的版本库与指导的远程仓库进行关联；</li><li>rename 原远程仓库的别名 新的别名：修改远程仓库的别名；</li><li>remove 远程仓库的别名：删除指定名称的远程仓库；</li><li>set-url 远程仓库的别名 新的远程仓库URL地址：修改远程仓库的URL地址。</li></ul></li></ul></li><li>关联成功以后，就可以push代码文件了。使用如下命令进行操作：<ul><li>git push [选项]：该命令用来将本地库中的文件推送到远程仓库中去。选项如下；<strong>注意：这里可能会出现一个异常，你的远程仓库有个文件README.md(也可能没有这个文件)，但是本地仓库却没有，就会出现“failed to push some refs to…”这种情况，所以无论远程仓库中是否有README.md文件，第一次push都需要把这个文件push到你的远程仓库中去，在当前目录下直接创建README.md文件，然后使用命令：git push -u 你自己的远程仓库别名 master，其中master是你每个新建远程仓库的默认分支，输入后，会要你输入登录到GitHub的账号和密码，要输入两次，第二次是免密SSH登录，输入后就可以顺利push文件到远程仓库了。</strong><ul><li>远程仓库的别名 本地分支名:远程分支名：把本地仓库的分支推送到远程仓库的指定分支；如果省略远程分支名，则默认推送到与本地分支存在追踪关系的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建；</li><li>远程仓库的别名 :远程分支名/远程仓库的别名 –delete 远程分支名：删除指定的远程仓库的分支。如，git push aaa :abc或者git push aaa –delete abc都是删除远程层库中的某个分支。</li></ul></li></ul></li></ul></li></ul><p><img src="./Image-git24.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git25.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git26.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>第一次从远程仓库下载代码文件到本地，有两种方式：<ul><li>一种是download(很简单)；</li><li>另一种则是使用git命令，我们介绍的是git命令的方式。<ul><li>从远程仓库中，找到Clone or download按钮，如下图；</li><li>开发人员在自己的工作目录中，打开Git，使用git命令：<ul><li>git clone 远程仓库URL [选项]：不添加选项参数，则默认在当前目录下，创建和远程仓库名相同的文件夹，并下载文件到该文件夹下。选项如下；<strong>注意：clone命令会做三件事情：一是完整的把远程仓库下载到本地，二是创建远程地址别名(前提是要关联了本地本地库和远程仓库)，三是初始化本地库。</strong></li><li>本地目录：将clone的分支放到指定的本地仓库目录中；</li><li>b 分支名称 本地目录：指定要克隆的分支，默认是master分支。</li></ul></li></ul></li></ul></li></ul><p><img src="./Image-git27.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>开发人员在修改了代码后，需要上传到GitHub中，但是这时候可能没有权限提交，所以项目经理一般都会将开发人员都邀请加入公司创建的GitHub中，这样开发人员就有权限提交代码到公司的GitHub中了；最后再使用git push命令，push修改过的代码就行了。</li></ul><p><img src="./Image-git28.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>如果需要拉取最新版本的文件到本地，则使用：<ul><li>git fetch [选项]。选项如下：<ul><li>远程仓库的别名：将远程仓库所有分支的最新版本全部取回到本地；</li><li>远程仓库的别名 分支名：将远程仓库指定分支的最新版本取回到本地。</li></ul></li><li>git pull：从远程仓库获取最新版本并合并到本地；即等同于执行了git fetch和git merge两条命令。效率上git pull更快一些，但是不一定安全，因为git fetch可以进行有选择的合并，所以根据工作中的需求，选择合适的拉取命令方式才是正确的。</li></ul></li><li>协同开发冲突问题：在开发者，经常会遇到两个人同时在修改一个文件的问题，即当同事A上传了对C文件的修改后，紧接着同事B也上传了对C文件的修改，此时GitHub就会出现冲突，即不知道该听那个开发者的，C文件中应该使用谁的内容才是正确的，所以为了避免出现这种问题，GitHub规定，出现这种情况时，另一个人应该先更新自己的本地文件，即保证自己本地是最新版本，然后再做修改即可。<strong>注意：解决冲突后，最后提交文件时，不要带文件名，只需要带上提交的说明信息(即-m参数)，直接提交即可。</strong></li></ul><p>&nbsp;</p><p>&nbsp;</p><h3 id="NO2-4-IDEA工具中使用Git"><a href="#NO2-4-IDEA工具中使用Git" class="headerlink" title="NO2.4 IDEA工具中使用Git"></a>NO2.4 IDEA工具中使用Git</h3><p>IDEA默认集成了Git工具。</p><ul><li>IDEA中使用Git将项目push到远程仓库，如下列图中所示：</li></ul><p><img src="./Image-git29.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git30.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git31.png" srcset="/img/loading.gif" alt=""><br><strong>说明：测试成功会出现这个。</strong></p><p>&nbsp;</p><p><img src="./Image-git32.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git33.png" srcset="/img/loading.gif" alt=""><br><strong>说明：点击Create Git Repository后，会出现如上所示，意思就是我要给这个项目init(也就是创建)一个版本库。</strong></p><p>&nbsp;</p><p><img src="./Image-git34.png" srcset="/img/loading.gif" alt=""><br><strong>说明：将文件add到暂存区。</strong></p><p>&nbsp;</p><p><img src="./Image-git35.png" srcset="/img/loading.gif" alt=""><br><strong>说明：选中项目，将项目add到暂存区。</strong></p><p>&nbsp;</p><p><img src="./Image-git36.png" srcset="/img/loading.gif" alt=""><br><strong>说明：进行commit操作，提交到版本库中。</strong></p><p>&nbsp;</p><p><img src="./Image-git37.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git38.png" srcset="/img/loading.gif" alt=""></p><p><strong>说明：使用IDEA集成Git，push代码文件到远程仓库；首先，需要配置登录到GitHub的账户，就是你平常登录到GitHub的账号和密码。</strong></p><p>&nbsp;</p><p><img src="./Image-git39.png" srcset="/img/loading.gif" alt=""><br><strong>说明：配置远程仓库的url，也就是关联远程仓库。</strong></p><p>&nbsp;</p><p><img src="./Image-git40.png" srcset="/img/loading.gif" alt=""><br><strong>说明：在这里面设置远程仓库的url即可。</strong></p><p>&nbsp;</p><p><img src="./Image-git41.png" srcset="/img/loading.gif" alt=""><br><strong>说明：最后，选择push命令就可以将代码push到远程仓库了。</strong></p><p>&nbsp;</p><p><img src="./Image-git42.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git43.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><ul><li>开发人员从远程仓库clone项目代码到本地。<ul><li>首先在远程仓库里复制一下远程仓库的url；</li></ul></li></ul><p><img src="./Image-git44.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git45.png" srcset="/img/loading.gif" alt=""></p><p><strong>说明：选择VCS，再选择Checkout from Version Control选项，最后选择Git。</strong></p><p>&nbsp;</p><p><img src="./Image-git46.png" srcset="/img/loading.gif" alt=""></p><p><strong>说明：在弹出的框中，填入远程仓库的url，并可以点击Test，测试是否能够连接，连接成功会出现以上绿色框中的提示；其中Directory则是指你要将clone下来的项目文件放在本地哪个位置，最后点击Clone即可；另外当开发人员修改了项目代码之后，需要push项目文件到远程仓库，这个时候也要注意，需要得到远程仓库管理人员的权限邀请，即管理人员没有邀请你的话，你哪怕写好了代码，也是无法提交到远程仓库的；最后，远程仓库默认使用的是Clone时使用远程仓库url。</strong></p><p>&nbsp;</p><ul><li>当别人push了新代码之后，你需要更新自己的本地代码，按下图操作即可。</li></ul><p><img src="./Image-git47.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p><p><img src="./Image-git48.png" srcset="/img/loading.gif" alt=""></p><p>&nbsp;</p>]]></content>
    
    
    <categories>
      
      <category>扩展课程</category>
      
      <category>版本控制工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
